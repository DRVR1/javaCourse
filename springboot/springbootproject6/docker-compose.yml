# Docker compose seguro que solo expone el puerto 80 para el frontend con nginx. 

services:
  # Creo un contenedor de base de datos con usuario, contrase√±a y lo expongo en la red interna con puerto 5432
  postgres:
    image: postgres
    restart: always
    networks:
      - internal
    expose:
      - "5432"
    volumes:
      - sql_app_name:/var/lib/postgresql/data
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: 38mOj2iGcnulVtni2RAMSCx7FBcH
      POSTGRES_USER: sa
      POSTGRES_DB: dbName

  # Dado una imagen de backend ya generada, le seteo variables de entorno para que se pueda conectar a la DB (estas variables son recibidas en application.properties de springboot)
  # El backend se expone en la red interna puerto 8080 (no se puede acceder desde el exterior, ni desde el propio host del contenedor)
  back:
    image: backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/dbName
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=38mOj2iGcnulVtni2RAMSCx7FBcH
    depends_on:
      - postgres
    networks:
      - internal
    expose:
      - "8080"
    # Descomentar para depuracion y poder acceder directamente al backend sin pasar por nginx
    ports:
      - "8080:8080"

# Opcional: integra una imagen existente de frontend (con nginx) que escucha en el puerto 80.
# Esta imagen de frontend react+vite ya viene con un nginx escuchando en el puerto 80 el cual devuelve el front construido.
  # front:
  #   image: frontend 
  #   ports:
  #     - "80:80" 
  #   networks:
  #     - internal
  #     - public
  #   depends_on:
  #     - back

volumes:
  sql_app_name:

networks:
  internal:
    driver: bridge
  public:
    driver: bridge